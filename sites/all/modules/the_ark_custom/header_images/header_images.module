<?php

function header_images_menu () {
  $items = array();
  $items['images/%'] = array(
    'page callback' => 'header_images_load',
    'access callback' => 'user_access',
    'access arguments' => array('view header images'),
    'page arguments' => array(1),
  );
  $items['images/%/%'] = array(
    'page callback' => 'header_images_load',
    'access callback' => 'user_access',
    'access arguments' => array('view header images'),
    'page arguments' => array(1, 2),
  );
  return $items;
}

function header_images_permission () {
  return array(
    'view header images' => array(
      'title' => t('View header images'),
      'description' => t('View header images generated by the Ark Header Images module.'),
    ),
  );
}

function header_images_load ($type, $style = 'mobile') {
  $type .= '_image';
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->execute();
  $nodes = isset($result['node']) ? $result['node'] : array();
  if (empty($nodes)) return drupal_not_found();
  $node = $nodes[array_rand($nodes)];
  if (!isset($node->nid)) return drupal_not_found();
  $node = node_load($node->nid);
  if (!isset($node->field_image['und'][0]['uri']) || !isset($node->field_image['und'][0]['filemime'])) return drupal_not_found();
  $image_uri = header_images_load_style($style, $type, $node->field_image['und'][0]['uri']);
  $image_mime = $node->field_image['und'][0]['filemime'];
  $image_data = fopen($image_uri, 'rb');
  header('Content-Type: ' . $image_mime);
  header('Content-Length: ' . filesize($image_uri));
  fpassthru($image_data);
  exit;
}

function header_images_load_style ($style, $type, $uri) {
  $style = $type . '_' . $style;
  $style_path = image_style_path($style, $uri);
  if (!file_exists($style_path)) {
    $style = image_style_load($style);
    if (empty($style)) return $uri;
    image_style_create_derivative($style, $uri, $style_path);
  }
  return $style_path;
}
